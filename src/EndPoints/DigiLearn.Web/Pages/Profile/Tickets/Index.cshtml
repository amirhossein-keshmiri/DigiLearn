@page
@using Common.Application.DateUtil
@using DigiLearn.Web.Infrastructure
@using TicketModule.Data.Entities
@model DigiLearn.Web.Pages.Profile.Tickets.IndexModel
@{
  Layout = "Shared/_ProfileLayout";
  ViewData["BreadcrumbTitle"] = "Tickets";
  var counter = 1;
}
<div class="col-lg-9">
  <div class="tickets">
    <div class="d-flex align-items-center justify-content-between flex-wrap page-title">
      <h5>Support Tickets</h5>
      <a href="#" class="btn btn-secondary rounded-pill" data-bs-toggle="modal" data-bs-target="#add_ticket"><i class="isax isax-add-circle me-2 fs-10"></i>Add Ticket</a>
    </div>
    <div class="row">
      <div class="col-md-6 col-xl-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <span class="icon-box bg-primary-transparent me-3 flex-shrink-0">
                <img src="assets/img/icon/graduation.svg" alt="">
              </span>
              <div>
                <span class="d-block">Total Tickets</span>
                <h4 class="fs-24 mt-1">@Model.FilterResult.EntityCount</h4>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6 col-xl-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <span class="icon-box bg-secondary-transparent me-3 flex-shrink-0"><img src="assets/img/icon/book.svg" alt=""></span>
              <div>
                <span class="d-block">Opened Tickets</span>
                <h4 class="fs-24 mt-1">30</h4>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6 col-xl-4">
        <div class="card">
          <div class="card-body">
            <div class="d-flex align-items-center">
              <span class="icon-box bg-success-transparent me-3 flex-shrink-0"><img src="assets/img/icon/bookmark.svg" alt=""></span>
              <div>
                <span class="d-block">Closed Tickets</span>
                <h4 class="fs-24 mt-1">25</h4>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="row align-items-center mb-2">
      <div class="col-md-8">
        <div class="d-flex align-items-center flex-wrap">
          <!-- Priority Filter -->
          <div class="mb-3">
            <div class="dropdown me-3">
              <a href="javascript:void(0);"
                 class="dropdown-toggle text-gray-6 btn  rounded border d-inline-flex align-items-center"
                 data-bs-toggle="dropdown"
                 aria-expanded="false"
                 id="priorityFilterToggle">
                Priority: <span id="priorityFilterLabel">@(Model.TicketFilterParams?.Priority?.ToString() ?? "All")</span>
              </a>
              <ul class="dropdown-menu dropdown-menu-end" id="priorityFilter">
                <li><a href="javascript:void(0);" class="dropdown-item" data-value="">All</a></li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="Low">Low</a>
                </li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="Medium">Medium</a>
                </li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="High">High</a>
                </li>
              </ul>
            </div>
          </div>

          <!-- Status Filter -->
          <div class="mb-3">
            <div class="dropdown me-3">
              <a href="javascript:void(0);"
                 class="dropdown-toggle text-gray-6 btn  rounded border d-inline-flex align-items-center"
                 data-bs-toggle="dropdown"
                 aria-expanded="false"
                 id="statusFilterToggle">
                Status: <span id="statusFilterLabel">@(Model.TicketFilterParams?.Status?.ToString() ?? "All")</span>
              </a>
              <ul class="dropdown-menu dropdown-menu-end" id="statusFilter">
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="">All</a>
                </li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="Pending">Pending</a>
                </li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="Answered">Answered</a>
                </li>
                <li>
                  <a href="javascript:void(0);" class="dropdown-item rounded-1" data-value="Closed">Closed</a>
                </li>
              </ul>
            </div>
          </div>

          <!-- Clear Filter -->
          <div class="mb-3">
            <div class="me-3">
              <a href="javascript:void(0)" class="btn btn-sm btn-secondary rounded-pill" onclick="clearFilters()">Clear Filters</a>
            </div>
          </div>
        </div>
      </div>
      <!-- Search Box -->
      <div class="col-md-4">
        <div class="input-icon mb-3">
          <span class="input-icon-addon">
            <i class="isax isax-search-normal-14"></i>
          </span>
          <input type="text" class="form-control form-control-md" id="searchInput" placeholder="Search By Title ...">
        </div>
      </div>
    </div>
    <div class="table-responsive custom-table">
      <table class="table">
        <thead class="thead-light">
          <tr>
            <th>Ticket ID</th>
            <th>Date</th>
            <th>Subject</th>
            <th>Priority</th>
            <th>Status</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          @foreach (var item in Model.FilterResult.Data)
          {
            <tr data-ticket-id="@item.Id">
              <td>#@counter</td>
              <td>@item.CreationDate.ToPersianDate()</td>
              <td>@item.Title</td>
              <td>
                @switch (item.Priority)
                {
                  case TicketPriority.Low:
                    <span class="badge badge-sm bg-soft-success d-inline-flex align-items-center"><i class="fa-solid fa-circle fs-5 me-1"></i>Low</span>
                    break;
                  case TicketPriority.Medium:
                    <span class="badge badge-sm bg-soft-skyblue d-inline-flex align-items-center"><i class="fa-solid fa-circle fs-5 me-1"></i>Medium</span>
                    break;
                  case TicketPriority.High:
                    <span class="badge badge-sm bg-soft-danger d-inline-flex align-items-center"><i class="fa-solid fa-circle fs-5 me-1"></i>High</span>
                    break;
                }
              </td>
              <td>
                @switch (item.Status)
                {
                  case TicketStatus.Pending:
                    <span class="badge badge-sm bg-warning d-inline-flex align-items-center" data-status="Pending"><i class="fa-solid fa-circle fs-5 me-1"></i>Pending</span>
                    break;
                  case TicketStatus.Answered:
                    <span class="badge badge-sm bg-success d-inline-flex align-items-center" data-status="Answered"><i class="fa-solid fa-circle fs-5 me-1"></i>Answered</span>
                    break;
                  case TicketStatus.Closed:
                    <span class="badge badge-sm bg-danger d-inline-flex align-items-center" data-status="Closed"><i class="fa-solid fa-circle fs-5 me-1"></i>Closed</span>
                    break;
                }
              </td>
              <td>
                <div class="d-flex align-items-center">
                  <a href="javascript:void(0)" class="d-inline-flex fs-14 me-1 action-icon"
                     onclick="loadTicketDetails('@item.Id')">
                    <i class="isax isax-eye"></i>
                  </a>
                  <a href="#" class="d-inline-flex fs-14 me-1 action-icon" data-bs-toggle="modal" data-bs-target="#edit_ticket"><i class="isax isax-edit-2"></i></a>
                  <a href="#" class="d-inline-flex fs-14 action-icon" data-bs-toggle="modal" data-bs-target="#delete_modal"><i class="isax isax-trash"></i></a>
                </div>
              </td>
            </tr>
            counter += 1;
          }
        </tbody>
      </table>
    </div>
    @* <partial name="Shared/_Pagination"  model="Model.FilterResult"/> *@
    <div id="pagination-container">
      <!-- Pagination will be injected here -->
    </div>
  </div>
</div>

<!-- Add Ticket -->
<div class="modal fade" id="add_ticket">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="fw-bold">Add Ticket</h5>
        <button type="button" class="btn-close custom-btn-close" data-bs-dismiss="modal" aria-label="Close">
          <i class="isax isax-close-circle5"></i>
        </button>
      </div>
      <form method="post" asp-page-handler="AddTicket">
        <div class="modal-body">
          <div class="row">
            <div class="col-md-12">
              <editor-row for="AddTicketRequest.Title" />
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Priority <span class="text-danger"> *</span></label>
                <select class="select2 form-control" asp-for="AddTicketRequest.Priority" required>
                  <option value="">Select</option>
                  <option value="High">High</option>
                  <option value="Low">Low</option>
                  <option value="Medium">Medium</option>
                </select>
              </div>
            </div>
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Description</label>
                <textarea asp-for="AddTicketRequest.Text" id="summernote" class="form-control summernote"></textarea>
                <span asp-validation-for="AddTicketRequest.Text" class="text-danger"></span>
              </div>
            </div>
            @* <div class="col-md-12">
							<div class="mb-3">
								<label class="form-label">Attachments</label>
								<div class="file-upload drag-file w-100 d-flex align-items-center justify-content-center flex-column">
									<span class="upload-img mb-2"><i class="isax isax-folder5 fs-24"></i></span>
									<p class="mb-1 text-gray-9 fw-medium">Drag and drop your files</p>
									<p class="mb-2 fs-12">Accept File Type: doc,docx,jpg,jpeg,png,txt,pdf</p>
									<input type="file" accept="video/image">
									<span class="btn mt-2 btn-secondary rounded-pill"><i class="isax isax-document-upload me-1"></i>Upload</span>
								</div>
							</div>
						</div> *@
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn bg-gray-100 rounded-pill me-2" type="button" data-bs-dismiss="modal">Cancel</button>
          <button class="btn btn-secondary rounded-pill" type="submit" id="addTicketSubmit">Submit</button>
        </div>
      </form>
    </div>
  </div>
</div>
<!-- /Add Ticket -->
<!-- Edit Ticket -->
<div class="modal fade" id="edit_ticket">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="fw-bold">Edit Ticket</h5>
        <button type="button" class="btn-close custom-btn-close" data-bs-dismiss="modal" aria-label="Close">
          <i class="isax isax-close-circle5"></i>
        </button>
      </div>
      <form method="post" asp-page-handler="EditTicket">
        <div class="modal-body">
          <div class="row">
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Ticket Title <span class="text-danger"> *</span></label>
                <input type="text" class="form-control" value="Issue with Course Notification Emails">
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Category <span class="text-danger"> *</span></label>
                <select class="select">
                  <option>Select</option>
                  <option selected>Mailing Issues</option>
                  <option>Language Issues</option>
                  <option>Installation Error</option>
                </select>
              </div>
            </div>
            <div class="col-md-6">
              <div class="mb-3">
                <label class="form-label">Priority <span class="text-danger"> *</span></label>
                <select class="select">
                  <option>Select</option>
                  <option selected>High</option>
                  <option>Low</option>
                  <option>Medium</option>
                </select>
              </div>
            </div>
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Description</label>
                <div class="summernote"><p>Enter Ticket Detail</p></div>
              </div>
            </div>
            <div class="col-md-12">
              <div class="mb-3">
                <label class="form-label">Attachments</label>
                <div class="file-upload drag-file w-100 d-flex align-items-center justify-content-center flex-column">
                  <span class="upload-img mb-2"><i class="isax isax-folder5 fs-24"></i></span>
                  <p class="mb-1 text-gray-9 fw-medium">Drag and drop your files</p>
                  <p class="mb-2 fs-12">Accept File Type: doc,docx,jpg,jpeg,png,txt,pdf</p>
                  <input type="file" accept="video/image">
                  <span class="btn mt-2 btn-secondary rounded-pill"><i class="isax isax-document-upload me-1"></i>Upload</span>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button class="btn bg-gray-100 rounded-pill me-2" type="button" data-bs-dismiss="modal">Cancel</button>
          <button class="btn btn-secondary rounded-pill" type="submit">Save Changes</button>
        </div>
      </form>
    </div>
  </div>
</div>
<!-- /Edit Ticket -->
<!-- Ticket Details Modal -->
<div class="modal fade" id="ticket_details">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="d-inline-flex align-items-center">
          Ticket Details <span class="text-primary fs-14 ms-2" id="detail-ticket-id">#Loading...</span>
        </h5>
        <div class="d-flex align-items-center justify-content-end">
          <span class="badge badge-sm d-inline-flex align-items-center me-2" id="detail-status-badge">
            <i class="fa-solid fa-circle fs-5 me-1"></i> <span id="detail-status-text">Loading...</span>
          </span>
          <!-- Close Ticket Button -->
          @* @if (Model.Ticket?.Status != TicketStatus.Closed)
          {
            <delete-item description="Are you sure you want to close this ticket?"
                       url="@Url.Page("Index","CloseTicket", new {ticketId = Model.Ticket?.Id})"
                       class="btn btn-danger btn-sm rounded-pill me-2 d-none">
            <i class="isax isax-lock"></i> Close Ticket
          </delete-item>
          } *@
          <button type="button" class="btn btn-danger btn-sm rounded-pill me-2" id="closeTicketBtn">
            <i class="isax isax-lock"></i> Close Ticket
          </button>

          <button type="button" class="btn-close custom-btn-close" data-bs-dismiss="modal" aria-label="Close">
            <i class="isax isax-close-circle5"></i>
          </button>
        </div>
      </div>
      <div class="modal-body">
        <div class="row">
          <div class="col-lg-4">
            <div class="mb-3">
              <h6 class="mb-1">Date</h6>
              <p id="ticketCreationDate">-</p>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="mb-3">
              <h6 class="mb-1">Priority</h6>
              <span class="badge badge-sm d-inline-flex align-items-center" id="ticket-priority-badge">
                <i class="fa-solid fa-circle fs-5 me-1"></i> <span id="ticket-priority-text">-</span>
              </span>
            </div>
          </div>
          <div class="col-lg-12">
            <div class="mb-3">
              <h6 class="mb-1">Subject</h6>
              <p id="ticketTitle">-</p>
            </div>
          </div>
          <div class="col-lg-12">
            <div>
              <h6 class="mb-1">Description</h6>
              <p id="ticketDescription" class="ticket-description">-</p>
            </div>
          </div>

          <!-- Messages Thread -->
          <div class="col-lg-12 mt-3">
            <h6>Conversation</h6>
            <div id="messages-container" class="conversation">
              <!-- Messages will be injected here -->
            </div>
          </div>
        </div>
        <div class="col-lg-12 mt-3">
          <form id="replyForm">
            <h6>Reply</h6>
            <div class="mb-3 replayMessage">
              <textarea class="form-control" rows="3" placeholder="Enter your reply..." name="message"></textarea>
            </div>
            <button type="submit" class="btn btn-secondary rounded-pill">Send Reply</button>
          </form>
        </div>
      </div>
    </div>
  </div>
  <input type="hidden" name="__RequestVerificationToken" value="@Html.AntiForgeryToken()" />
</div>
<!-- /Ticket Details Modal -->
<!-- Delete Modal -->
<div class="modal fade" id="delete_modal">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-body text-center custom-modal-body">
        <span class="avatar avatar-lg bg-danger-transparent rounded-circle mb-2">
          <i class="isax isax-trash fs-24 text-danger"></i>
        </span>
        <div>
          <h4 class="mb-2">Delete Ticket</h4>
          <p class="mb-3">Are you sure you want to delete ticket?</p>
          <div class="d-flex align-items-center justify-content-center">
            <a href="#" class="btn bg-gray-100 rounded-pill me-2" data-bs-dismiss="modal">Cancel</a>
            <a href="#" class="btn btn-secondary rounded-pill">Yes, Delete</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- /Delete Modal -->
@section ProfileSectionMeta {
  <!-- Summernote JS -->
  <link rel="stylesheet" href="/assets/plugins/summernote/summernote-lite.min.css">

  <!-- Select2 CSS -->
  <link rel="stylesheet" href="/assets/plugins/select2/css/select2.min.css">

  <style>
    .ticket-description {
      padding: 10px;
      margin-top: inherit;
      background-color: #f8f9fa;
      border-radius: 8px;
    }

    .conversation {
      max-height: 400px; /* Optional: Limit height for long conversations */
      overflow-y: auto;
      padding: 10px;
      border-radius: 8px;
      background-color: #f8f9fa;
      scroll-behavior: smooth;
      margin-top: inherit;
    }

    .message {
      /* margin-bottom: 15px; */
      margin: 12px 0;
      display: flex;
      flex-direction: column;
      max-width: 80%;
    }

      .message.user {
        /* text-align: right; */
        align-self: end;
      }

      .message.support {
        /* text-align: left; */
        align-self: start;
      }

    .message-content {
      /*background-color: #f9f9f9;
            border-radius: 8px;
            padding: 10px;
            max-width: 70%;
            word-break: break-word; */
      padding: 10px 14px;
      border-radius: 12px;
      font-size: 0.95rem;
      line-height: 1.4;
      word-wrap: break-word;
    }

    /* User (You) */
    .message.user .message-content {
      /* background-color: #e3f2fd; */
      background-color: #e3f0f1;
      color: #1976d2;
      border-bottom-right-radius: 4px;
    }

    /* Supporter (Support Team) */
    .message.supporter .message-content {
      background-color: #DCDCDC; /* Light blue background */
      color: #01579b;
      border-bottom-left-radius: 4px;
    }

    .message-user-name {
      /*       font-weight: bold;
                              margin-bottom: 5px; */
      font-weight: 600;
      font-size: 0.85rem;
      margin-bottom: 4px;
      color: dimgray;
    }

    .message-user-text {
      color: black;
    }

    .message-timestamp {
      /*color: #888;
                              font-size: 0.8rem; */
      font-size: 0.75rem;
      color: #555;
      text-align: right;
      margin-top: 4px;
    }

    .message.user .message-timestamp {
      text-align: right;
    }

    .message.supporter .message-timestamp {
      text-align: left;
    }

    .replayMessage {
      margin-top: 10px;
    }
  </style>
}

@section ProfileSectionScripts {
  <!-- Select2 JS -->
  <script src="/assets/plugins/select2/js/select2.min.js"></script>

  <!-- Summernote JS -->
  <script src="/assets/plugins/summernote/summernote-lite.min.js"></script>

  <script>
    // Global variable to track currentTicketId for modal
    let currentTicketId = null;

    // 🎨 Helper: Get Status Badge HTML
    function getStatusBadge(status) {
        let cls, text;
        switch (status) {
            case 'Pending':    cls = 'bg-warning'; text = 'Pending'; break;
            case 'Answered':   cls = 'bg-success';  text = 'Answered';     break;
            case 'Closed':     cls = 'bg-danger'; text = 'Closed';     break;
            default:           cls = 'bg-gray';    text = 'Unknown';    break;
        }
        return `<span class="badge badge-sm ${cls} d-inline-flex align-items-center">
                    <i class="fa-solid fa-circle fs-5 me-1"></i>${text}
                </span>`;
    }

    // 🎨 Helper: Get Priority Badge HTML
    function getPriorityBadge(priority) {
        let cls, text;
        switch (priority) {
            case 'Low':    cls = 'bg-soft-success';  text = 'Low';    break;
            case 'Medium': cls = 'bg-soft-skyblue';  text = 'Medium'; break;
            case 'High':   cls = 'bg-soft-danger';   text = 'High';   break;
            default:       cls = 'bg-gray';          text = 'Unknown'; break;
        }
        return `<span class="badge badge-sm ${cls} d-inline-flex align-items-center">
                    <i class="fa-solid fa-circle fs-5 me-1"></i>${text}
                </span>`;
    }

    function updateTicketTable(result) {
        const $tbody = $('table tbody');
        $tbody.empty();

        if (result.data && result.data.length > 0) {
            let counter = result.currentPage * result.take - result.take + 1;
            result.data.forEach(item => {
                const statusBadge = getStatusBadge(item.status);
                const priorityBadge = getPriorityBadge(item.priority);

                $tbody.append(`
                    <tr data-ticket-id="${item.id}">
                        <td><a href="javascript:void(0)" class="text-primary" onclick="loadTicketDetails('${item.id}')">#${counter++}</a></td>
                        <td>${item.creationDate}</td>
                        <td>${item.title}</td>
                        <td>${priorityBadge}</td>
                        <td>${statusBadge}</td>
                        <td>
                            <div class="d-flex align-items-center">
                                <a href="javascript:void(0)" class="d-inline-flex fs-14 me-1 action-icon" onclick="loadTicketDetails('${item.id}')"><i class="isax isax-eye"></i></a>
                                <a href="#" class="d-inline-flex fs-14 me-1 action-icon" data-bs-toggle="modal" data-bs-target="#edit_ticket"><i class="isax isax-edit-2"></i></a>
                                <a href="#" class="d-inline-flex fs-14 action-icon" data-bs-toggle="modal" data-bs-target="#delete_modal"><i class="isax isax-trash"></i></a>
                            </div>
                        </td>
                    </tr>
                `);
            });
            updatePagination(result);
        } else {
            $tbody.append('<tr><td colspan="6" class="text-center">No tickets found.</td></tr>');
        }
    }

    function updatePagination(result) {
        const $container = $('#pagination-container');
        $container.empty();

        if (result.totalPages <= 1) return;

        const totalPages = result.totalPages;
        const currentPage = result.currentPage;

        let html = `
            <div class="row align-items-center mt-4">
                <div class="col-md-2">
                    <p class="pagination-text">Page ${currentPage} of ${totalPages}</p>
                </div>
                <div class="col-md-10">
                    <ul class="pagination lms-page justify-content-center justify-content-md-end mt-2 mt-md-0">
        `;

        // Prev
        if (currentPage > 1) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="changePageAjax(${currentPage - 1})">
                        <i class="fas fa-angle-left"></i>
                    </a>
                </li>
            `;
        }

        // Pages
        const start = Math.max(1, currentPage - 2);
        const end = Math.min(totalPages, currentPage + 2);

        for (let i = start; i <= end; i++) {
            if (i === currentPage) {
                html += `<li class="page-item active"><a class="page-link" href="javascript:void(0)">${i}</a></li>`;
            } else {
                html += `<li class="page-item"><a class="page-link" href="javascript:void(0)" onclick="changePageAjax(${i})">${i}</a></li>`;
            }
        }

        // Next
        if (currentPage < totalPages) {
            html += `
                <li class="page-item">
                    <a class="page-link" href="javascript:void(0)" onclick="changePageAjax(${currentPage + 1})">
                        <i class="fas fa-angle-right"></i>
                    </a>
                </li>
            `;
        }

        html += `
                    </ul>
                </div>
            </div>
        `;

        $container.html(html);
    }

    // 🔢 Change Page (AJAX version)
    async function changePageAjax(pageId) {
        const url = new URL(window.location.href);
        // url.searchParams.set('filterParams.pageId', pageId); // ✅ lowercase
        url.searchParams.set('FilterParams.PageId', pageId); // Use consistent param name
        console.log(pageId);
        window.history.replaceState({}, '', url.toString());
        await loadTickets(url.toString());
    }

    // 📦 Load Tickets via AJAX
    async function loadTickets(url) {
        try {
            const response = await fetch(url + (url.includes('?') ? '&' : '?') + 'handler=Filter');
            const data = await response.json();

            if (data.success) {
                updateTicketTable(data.filterResult);
            } else {
                ErrorAlert("Error", "Failed to load tickets.");
            }
        } catch (err) {
            console.error("Fetch error:", err);
            ErrorAlert("Error", "Network error.");
        }
    }

    // 🔁 Apply Filters: Update URL + Load Data
    async function applyFilters() {
        const status = $('#statusFilter .dropdown-item.active').data('value') || '';
        const priority = $('#priorityFilter .dropdown-item.active').data('value') || '';
        const title = $('#searchInput').val().trim();

        // Build URL
        const url = new URL(window.location.href);
        const params = url.searchParams;

        // Update all filters
        if (status) params.set('TicketFilterParams.Status', status); else params.delete('TicketFilterParams.Status');
        if (priority) params.set('TicketFilterParams.Priority', priority); else params.delete('TicketFilterParams.Priority');
        if (title) params.set('TicketFilterParams.Title', title); else params.delete('TicketFilterParams.Title');

        // Always reset to page 1 on filter change
        params.set('FilterParams.PageId', 1);

        // Update browser URL
        const newUrl = url.toString();
        window.history.replaceState({}, '', newUrl);

        // Load filtered data
        await loadTickets(newUrl);
    }

  </script>

  <script>
    // console.log('loadTicketDetails is defined:', typeof loadTicketDetails !== 'undefined');
    function loadTicketDetails(ticketId) {
        currentTicketId = ticketId;
        console.log(currentTicketId);
        $.ajax({
            url: '?handler=TicketById',
            type: 'GET',
            data: { ticketId: ticketId },
            dataType: 'json',
            beforeSend: function () {
                $('#detail-ticket-id').text('#Loading...');
                $('#ticketCreationDate').text('-');
                $('#ticket-priority-text').text('-');
                $('#ticketTitle').text('-');
                $('#ticketDescription').text('-');
                $('#messages-container').html('<em>Loading conversation...</em>');
            },
            success: function (response) {
                if (response.success) {
                    const t = response.ticket;

                    // ✅ Update status badge (use kebab-case IDs)
                    $('#detail-status-text').text(t.status);
                    $('#detail-status-badge')
                        .removeClass('bg-warning bg-purple bg-success bg-danger')
                        .addClass(getStatusClass(t.status))
                        .html(`<i class="fa-solid fa-circle fs-5 me-1"></i> ${t.status}`);

                    // ✅ Update other fields...
                    $('#detail-ticket-id').text('#' + t.id.substr(0,6).toUpperCase());
                    $('#ticketCreationDate').text(t.creationDate);
                    $('#ticketTitle').text(t.title);
                    $('#ticketDescription').html(t.text);

                    // Priority
                    const $priorityBadge = $('#ticket-priority-badge');
                    $priorityBadge.removeClass('bg-soft-success bg-soft-skyblue bg-soft-danger')
                                  .addClass(getPriorityClass(t.priority));
                    $('#ticket-priority-text').text(t.priority);

                    // Messages
                    const $msgContainer = $('#messages-container');
                    $msgContainer.empty();

                    if (t.messages && t.messages.length > 0) {
                        t.messages.forEach(msg => {
                            const isUser = msg.userId === '@User.GetUserId()';
                            const directionClass = isUser ? 'user' : 'supporter';

                            $msgContainer.append(`
                                <div class="message ${directionClass}">
                                    <div class="message-content">
                                        <div class="message-user-name">${msg.userFullName}</div>
                                        <div class="message-user-text">${msg.text}</div>
                                        <div class="message-timestamp">${msg.creationDate}</div>
                                    </div>
                                </div>
                            `);
                        });
                        $msgContainer.scrollTop(0); // Newest first
                    }

                    // ✅ Show/hide close button
                    if (t.status === 'Closed') {
                        $('#closeTicketBtn').addClass('d-none');
                        $('#replyForm').addClass('d-none');
                        if ($('.closed-notice').length === 0) {
                            $('#messages-container').after(`
                                <div class="text-center mt-2 closed-notice">
                                    <small class="text-muted">🔒 This ticket is closed.</small>
                                </div>
                            `);
                        }
                    } else {
                        $('#closeTicketBtn').removeClass('d-none');
                        $('#replyForm').removeClass('d-none');
                        $('.closed-notice').remove();
                    }

                    // ✅ Ensure reply form is enabled and visible
                    const $replyForm = $('#replyForm');
                    $replyForm.find('button[type="submit"]').prop('disabled', false).text('Send Reply');
                    $replyForm.find('textarea').prop('disabled', false);

                    // ✅ Show modal
                    var modal = new bootstrap.Modal($('#ticket_details'));
                    modal.show();
                } else {
                    ErrorAlert("Ticket Not Found", "Could not load ticket details.");
                }
            },
            error: function () {
                ErrorAlert("Error", "Failed to load ticket data.");
            }
        });
    }

     // Handle Close Ticket button click
    $(document).on('click', '#closeTicketBtn', function () {
        const ticketId = currentTicketId;
        if (!ticketId) return;

        Swal.fire({
            title: "Close Ticket?",
            text: "Are you sure you want to close this ticket? You won't be able to reply after closing.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, Close It",
            cancelButtonText: "Cancel",
            reverseButtons: true
        }).then(async (result) => {
            if (result.isConfirmed) {
              $('#closeTicketBtn').prop('disabled', true).text('Closing...');

                try {
                    const token = $('input[name="__RequestVerificationToken"]').val();

                    const res = await $.ajax({
                        url: '?handler=CloseTicket',
                        type: 'POST',
                        data: {
                            ticketId: ticketId,
                            __RequestVerificationToken: token
                        }
                    });

                    if (res.success) {
                        // ✅ Update UI: change status to Closed
                        $('#detail-status-text').text('Closed');
                        $('#detail-status-badge')
                            .removeClass('bg-success bg-warning')
                            .addClass(getStatusClass('Closed'));

                        // Hide Close Ticket button
                        $('#closeTicketBtn').addClass('d-none');

                        // Disable reply form
                        $('#replyForm').addClass('d-none');
                         $('#messages-container').append(`
                             <div class="text-center mt-2 closed-notice">
                                 <small class="text-muted">🔒 This ticket is closed. No replies are allowed.</small>
                             </div>
                        `);

                     // ✅ Update main table
                     const $ticketRow = $(`tr[data-ticket-id="${ticketId}"]`);

                     // ✅ Update badge dynamically
                     const $statusBadge = $ticketRow.find('.badge[data-status]');
                     $statusBadge.removeClass('bg-gray bg-warning bg-success bg-danger')
                                 .addClass('bg-danger')
                                 .html('<i class="fa-solid fa-circle fs-5 me-1"></i> Closed');
                                 // .text('Closed');

                        Success("Ticket Closed", "The ticket has been successfully closed.");
                    } else {
                        ErrorAlert("Failed", res.message || "Could not close the ticket.");
                    }
                } catch (err) {
                    console.error("Close ticket error:", err);
                    ErrorAlert("Error", "Failed to close ticket. Please try again.");
                } finally {
                    $('#closeTicketBtn').prop('disabled', false).text('Close Ticket');
                }
            }
        });
    });

    // Helper: Get status class
    function getStatusClass(status) {
        switch (status) {
            case 'Pending': return 'bg-warning';
            case 'Answered': return 'bg-success';
            case 'Closed': return 'bg-danger';
            default: return 'bg-gray';
        }
    }

    // Helper: Get priority badge class
    function getPriorityClass(priority) {
        switch (priority) {
            case 'Low': return 'bg-soft-success';
            case 'Medium': return 'bg-soft-skyblue';
            case 'High': return 'bg-soft-danger';
            default: return 'bg-gray';
        }
    }

    // Reset on close
    $('#ticket_details').on('hidden.bs.modal', function () {
        currentTicketId = null;

        // ✅ Remove all messages from conversation
        $('#messages-container').empty();

        // Clear reply textarea
        $('#replyForm textarea[name="message"]').val('');

        // Remove any "ticket closed" message
        $('.text-muted:contains("closed")').remove();
        $('.closed-notice').remove(); // Remove closed notice

        // ✅ Show reply form (in case it was hidden)
        $('#replyForm').removeClass('d-none')

        // Reset badges
        $('#detail-status-badge').removeClass('bg-warning bg-danger bg-success').addClass('bg-gray');
        $('#ticket-priority-badge').removeClass('bg-soft-success bg-soft-skyblue bg-soft-danger');

        $('#addTicketSubmit').prop("disabled", false);
    });
  </script>

  <script>
    $('#replyForm').on('submit', function (e) {
        e.preventDefault();

        const $form = $(this);
        const $btn = $form.find('button[type="submit"]');

        // ✅ Prevent double submission
        if ($btn.prop('disabled')) return;

        // ✅ Prevent reply if ticket is closed
        if ($('#detailStatusText').text().trim() === 'Closed') {
            ErrorAlert("Cannot Reply", "This ticket is closed and cannot be replied to.");
            return;
        }

        const message = $(this).find('[name="message"]').val().trim();
        if (!message) {
            alert('Please enter a message.');
            return;
        }

        if (!currentTicketId) {
            ErrorAlert("Error", "No ticket is open.");
            return;
        }

        // Get the anti-forgery token
        const token = $('input[name="__RequestVerificationToken"]').val();

        // ✅ Disable button during request
        $btn.prop('disabled', true).text('Sending...');

        $.ajax({
            url: '?handler=AddReply',
            type: 'POST',
            data: {
                ticketId: currentTicketId,
                text: message,
                __RequestVerificationToken: token // Include the token
            },
            beforeSend: function () {
                $('.loading').show();
            },
            complete: function () {
                $('.loading').hide();
            },
            success: function (response) {
                if (response.success) {
                    console.log(response);
                    const newMessage = response.message;
                    const $msgContainer = $('#messages-container');

                    const isUser = newMessage.userId === '@User.GetUserId()';
                    const directionClass = isUser ? 'user' : 'supporter';

                    $msgContainer.append(`
                        <div class="message ${directionClass}">
                            <div class="message-content">
                                <span class="message-user-name">${newMessage.userFullName}</span>
                                <div class="message-user-text">${newMessage.text}</div>
                                <div class="message-timestamp">${newMessage.creationDate}</div>
                            </div>
                        </div>
                    `);

                    $('#replyForm [name="message"]').val('');
                    $msgContainer.scrollTop($msgContainer[0].scrollHeight);
                } else {
                    ErrorAlert("Failed to send reply", "Could not add your message.");
                }
            },
            error: function (xhr, status, error) {
                console.error("Reply error:", error, xhr.responseText);
                const errorMessage = xhr.responseText ? JSON.parse(xhr.responseText)?.error : "Unknown error.";
                ErrorAlert("Error", `Failed to send reply. ${errorMessage}`);
            },
            complete: function () {
                // ✅ Always re-enable button after request
                $btn.prop('disabled', false).text('Send Reply');
            }
        });
    });
  </script>

  <script>
    $(function () {
        // Update Priority Label
        $('#priorityFilter .dropdown-item').on('click', function () {

            // Remove active class from all
            $('#priorityFilter .dropdown-item').removeClass('active');
            $(this).addClass('active');

            // Update label
            const value = $(this).data('value');
            $('#priorityFilterLabel').text(value || 'All');

            // Trigger filter
            applyFilters();
        });

        // Update Status Label
        $('#statusFilter .dropdown-item').on('click', function () {
            $('#statusFilter .dropdown-item').removeClass('active');
            $(this).addClass('active');

            const value = $(this).data('value');
            const label = value ? value : 'All';
            $('#statusFilterLabel').text(label);

            // Trigger filter
            applyFilters();
        });

          // Apply filters on search
          $('#searchInput').on('input', function () {
              applyFilters();
          });

        // Set initial active class from URL
        const urlParams = new URLSearchParams(window.location.search);

        const status = urlParams.get('TicketFilterParams.Status');
        const priority = urlParams.get('TicketFilterParams.Priority');
        const title = urlParams.get('TicketFilterParams.Title');

        // Restore Status
        if (status) {
            $('#statusFilter .dropdown-item[data-value="' + status + '"]').addClass('active');
            $('#statusFilterLabel').text(status);
        }

        // Restore Priority
        if (priority) {
            $('#priorityFilter .dropdown-item[data-value="' + priority + '"]').addClass('active');
            $('#priorityFilterLabel').text(priority);
        }

        // Restore Search
        if (title) {
            $('#searchInput').val(title);
        }

        // Initial load
        applyFilters();
    });
  </script>

  <script>
        function clearFilters() {
        $('#priorityFilter .dropdown-item').removeClass('active');
        $('#statusFilter .dropdown-item').removeClass('active');
        $('#priorityFilterLabel').text('All');
        $('#statusFilterLabel').text('All');
        $('#searchInput').val('');

        const url = new URL(window.location.href);
        url.searchParams.delete('TicketFilterParams.Status');
        url.searchParams.delete('TicketFilterParams.Priority');
        url.searchParams.delete('TicketFilterParams.Title');
        url.searchParams.set('FilterParams.PageId', 1);

        window.history.replaceState({}, '', url.toString());
        loadTickets(url.toString());
    }
  </script>
  @*<script>
    // Reinitialize Select2 when modal is shown
    $('#add_ticket, #edit_ticket').on('shown.bs.modal', function () {
      $(this).find('.select').each(function () {
        if (!$(this).data('select2')) {
          $(this).select2({
            placeholder: "Select",
            allowClear: true,
            width: '100%'
          });
        }
      });
    });
  </script> *@

  @*   <script>
    $(document).ready(function () {
        $('#summernote').summernote({
            height: 300,
            focus: true
        });

        // Intercept form submission to strip HTML
        $('#summernoteForm').on('submit', function () {
            var htmlContent = $('#summernote').summernote('code');
            var plainText = $('<div>').html(htmlContent).text(); // Strip HTML tags
            $('#plainContent').val(plainText); // Set plain text to hidden input
        });
    });
  </script> *@
}

@section Scripts {

  <!-- Validation -->
  <script src="/assets/js/validation.js" type="text/javascript"></script>

  <!-- Validation Scripts Partial -->
  <partial name="_ValidationScriptsPartial" />
}